; Custom PHP Configuration for AFS-MappingXT
; Optimized for performance and security

[PHP]
; Error handling
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
log_errors = On
error_log = /var/log/php-errors.log

; Resource limits
max_execution_time = ${PHP_MAX_EXECUTION_TIME}
max_input_time = ${PHP_MAX_EXECUTION_TIME}
memory_limit = ${PHP_MEMORY_LIMIT}
post_max_size = 50M
upload_max_filesize = 50M

; Date/Time
date.timezone = ${TZ}

; ============================================================================
; OPcache Configuration - Optimized for PHP 8.3 Production
; ============================================================================
; OPcache stores precompiled script bytecode in shared memory, eliminating
; the need for PHP to load and parse scripts on each request.

; Enable OPcache for web requests
opcache.enable = 1

; Enable OPcache for CLI scripts (useful for long-running CLI operations)
opcache.enable_cli = 1

; Memory allocated to OPcache for storing compiled scripts (in MB)
; Recommended: 128-512MB for production, depending on codebase size
; This application uses ~50MB, so 256MB provides comfortable headroom
opcache.memory_consumption = ${OPCACHE_MEMORY_CONSUMPTION}

; Memory for interned strings (class names, function names, etc.)
; Recommended: 8-32MB for medium applications, 64MB+ for large applications
; Reduces memory usage by storing strings once across all requests
opcache.interned_strings_buffer = ${OPCACHE_INTERNED_STRINGS_BUFFER}

; Maximum number of files that can be cached
; Recommended: Set to slightly more than the actual number of PHP files
; Use: find . -type f -name "*.php" | wc -l to count files
; This project has ~100 files, so 10000 is more than sufficient
opcache.max_accelerated_files = ${OPCACHE_MAX_ACCELERATED_FILES}

; How often to check file timestamps for changes (in seconds)
; Production: 60+ seconds (files rarely change)
; Development: 0-2 seconds (files change frequently)
; Docker deployment with immutable images: Can be higher (60-300)
opcache.revalidate_freq = ${OPCACHE_REVALIDATE_FREQ}

; Validate timestamps on every request (overrides revalidate_freq when enabled)
; Production: 0 (off) - use revalidate_freq for better performance
; Development: 1 (on) - always check for file changes
opcache.validate_timestamps = ${OPCACHE_VALIDATE_TIMESTAMPS}

; Enable faster shutdown by freeing memory in one operation
; Recommended: Always enabled for better performance
opcache.fast_shutdown = 1

; Enable file override optimization
; Allows OPcache to cache file existence checks
; Recommended: Enabled for production
opcache.enable_file_override = 1

; Save cached files to disk (useful for container restarts)
; Disabled by default as containers are typically ephemeral
; opcache.file_cache = /tmp/opcache

; Validate cached files on every request
; Recommended: Enabled unless using file_cache_only
opcache.file_cache_consistency_checks = 1

; Enable huge code pages (Linux only, requires CONFIG_TRANSPARENT_HUGEPAGE)
; Can improve performance by 5-10% on supported systems
; Recommended: Try enabling in production if available
opcache.huge_code_pages = ${OPCACHE_HUGE_CODE_PAGES}

; Optimization level
; Default (-1) is recommended for most use cases
opcache.optimization_level = 0x7FFEBFFF

; ============================================================================
; JIT (Just-In-Time) Compilation - PHP 8.0+ Feature
; ============================================================================
; JIT compiles hot code paths to native machine code for significant
; performance improvements (10-50% depending on workload).
;
; JIT Mode Options:
; - 0 or "disable"   : JIT disabled
; - "tracing" (1255) : Best for most web applications (recommended)
; - "function" (1205): Good for CPU-intensive applications
; - 1254             : Tracing JIT with performance optimizations
; - 1235             : Function JIT with basic optimizations
;
; Format: CRTO (C=CPU-specific, R=Register allocation, T=Trigger, O=Optimization)
; Recommended for production: tracing (1255) or 1254 for web apps

; JIT mode - "tracing" is optimal for typical web applications
; "tracing" = 1255: Trace JIT with full optimizations
opcache.jit = ${OPCACHE_JIT_MODE}

; JIT buffer size - Memory allocated for JIT compiled code
; Recommended: 64-256MB for typical applications
; Larger codebases or compute-intensive apps may benefit from 256-512MB
; Set to 0 to disable JIT entirely
opcache.jit_buffer_size = ${OPCACHE_JIT_BUFFER_SIZE}

; JIT debug level (0-4)
; 0 = No debug info (production)
; 1+ = Various debug levels (development only)
opcache.jit_debug = 0

; Realpath cache optimization
realpath_cache_size = 4096K
realpath_cache_ttl = 600

; Session configuration
session.save_handler = files
session.save_path = "/tmp"
session.use_strict_mode = 1
session.cookie_httponly = 1
session.cookie_samesite = "Lax"
session.cookie_secure = 0
session.use_only_cookies = 1
session.cookie_lifetime = 0
session.gc_maxlifetime = 1440

; Security settings
expose_php = Off
allow_url_fopen = On
allow_url_include = Off

; Output buffering for better performance
output_buffering = 4096

; File uploads
file_uploads = On
upload_tmp_dir = /tmp
