title,description,steps,acceptance,component,files,effort,status,assignees,labels
Projektweite Performance-Analyse durchführen,"Profiling mit Blackfire/Xdebug (sampling), Request- und CLI-Pfade messen; Hotspots und langsame DB-Queries identifizieren.",Blackfire/Xdebug einrichten → Endpunkte/Konsolenbefehle durchlaufen → Flamegraphs sichern → Hotspots dokumentieren.,Liste der Top-10 Hotspots mit reproduzierbaren Metriken liegt vor; Basiswerte (Baseline) sind dokumentiert.,Gesamtprojekt,"app/, public/, modules/, vendor/",6,Offen,,"profiling, performance, Gesamtprojekt, priority:, hoch"
Nicht genutzte Klassen/Funktionen automatisch erkennen und entfernen,Mit PHPStan (max Level) + Psalm/phan und 'dead-code' Tools ungenutzte Symbole finden; veraltete Endpunkte löschen.,Static Analysis konfigurieren → Dead-Code-Report erzeugen → Pull-Requests je Modul zum Entfernen erstellen.,Dead-Code-Report ist leer; Builds bestehen; keine Funktionalität bricht.,Backend PHP,"app/, modules/, legacy/",10,Offen,,"cleanup, dead-code, static-analysis, Backend, PHP, priority:, hoch"
Ordner- und Namespacestruktur bereinigen (PSR-4),Klarer Modulzuschnitt; einheitliche PSR-4 Autoloading-Regeln; Legacy-Ordner archivieren oder entfernen.,Ist-Struktur auditieren → Zielstruktur definieren → Migrations-PRs pro Modul → CI grün halten.,composer dump-autoload ohne Warnungen; 0 classmap-fallbacks; Dokumentierte Struktur.,Architektur,"composer.json, app/",8,Offen,,"architektur, psr-4, cleanup, priority:, mittel"
OPcache + JIT korrekt konfigurieren,"OPcache, revalidate_freq, memory_consumption, interned_strings_buffer; JIT (Tracer) sinnvoll konfigurieren.",Empfohlene Settings setzen → Warmup prüfen → Performance vor/nach messen.,Durchsatz +20% ggü. Baseline (oder Latenz -15%); keine Cache-Resets im Log.,Runtime,/usr/local/etc/php/conf.d/opcache.ini oder docker/php.ini,3,Offen,,"opcache, php, performance, Runtime, priority:, hoch"
"Dockerfile optimieren (Multi-Stage, Layer, apt-clean)","Multi-Stage Build, Caching optimieren, apt-get cleanup, feste Versions-Pins; Healthcheck hinzufügen.",Basisimage evaluieren → Multi-Stage implementieren → Build-Time & Image-Größe messen.,Image-Größe mindestens 30% kleiner; reproduzierbare Builds; Healthcheck OK.,DevOps,Dockerfile,5,Offen,,"docker, ci, performance, DevOps, priority:, hoch"
php-yaml (YAML Extension) korrekt installieren,"Sicherstellen, dass php-yaml geladen wird; libyaml-dev im Build; Tests für YAML-Parsing.",Systempakete ergänzen → pecl install yaml → extension=yaml aktivieren → php -m prüfen.,php -m enthält yaml; Anwendung validiert YAML-Dateien fehlerfrei.,Runtime/Docker,"Dockerfile, php.ini",2,Offen,,"yaml, docker, php, Runtime-Docker, priority:, hoch"
XT:Commerce ↔ AFS-Manager ↔ SQLite Schnittstelle entschlacken,Nur benötigte Tabellen/Queries verwenden; redundante Konvertierungen entfernen; robuste Fehlerbehandlung.,Query-Inventar erstellen → Unused Queries löschen → Indizes setzen → Exceptions härten.,Keine ungenutzten Mappings; Query-Zeit reduziert; Timeouts eliminiert.,Schnittstellen,"bridge/, adapters/, /database/app.db",12,Offen,,"schnittstelle, sqlite, xt-commerce, cleanup, Schnittstellen, priority:, hoch"
DB-Indizes & Query-Optimierung (SQLite + ggf. MySQL),Langsame Abfragen mit EXPLAIN analysieren; sinnvolle Indizes; N+1 vermeiden; Pagination konsistent.,Slow-Query-Log/Profiling → EXPLAIN → Indizes anlegen → Regressionstests.,Top-5 Queries ≥40% schneller; keine Volltabellenscans mehr.,Datenbank,"/database/app.db, migrations/",8,Offen,,"db, indices, performance, Datenbank, priority:, hoch"
TimeManager: Überstundenberechnung profilieren & optimieren,"Berechnungen vektorisieren/vereinfachen, Caching wo sinnvoll; IO minimieren.",Profiler auf Methoden → Hotspots refactoren → Unit-Tests für edge cases.,Laufzeit -30%; gleiche Ergebnisse; Tests grün.,TimeManager-Klasse,app/TimeManager.php,6,Offen,,"time-tracking, performance, refactor, TimeManager-Klasse, priority:, hoch"
monthly_report.php: DOMPDF-Generierung beschleunigen,"Bild-Caching (Emoji-PNGs), HTML vereinfachen, CSS minimieren; weniger DOM-Knoten.",Assets pre-cachen → Bildgrößen optimieren → Template vereinfachen → Renderzeit messen.,PDF-Renderzeit -30% ggü. Baseline; identisches visuelles Ergebnis.,Reporting/PDF,"monthly_report.php, templates/pdf/",5,Offen,,"pdf, dompdf, assets, Reporting-PDF, priority:, mittel"
PSR-12 & einheitliche Code-Style-Pipeline,php-cs-fixer oder Laravel Pint integrieren; pre-commit Hook; CI-Check.,Tool konfigurieren → erste Mass-Formatierung → CI Gate setzen.,Keine Style-Verstöße in CI; einheitliche Formatierung.,Codequalität,"composer.json, .github/workflows/",3,Offen,,"style, ci, psr-12, Codequalitt, priority:, mittel"
Automatisierte Tests (Unit/Feature) für Kernmodule,"Abdeckung für TimeManager, Schnittstellen, monthly_report; Fixtures für DB.",Test-Skelette erstellen → kritische Pfade abdecken → CI integrieren.,Coverage ≥60% in Kernbereichen; CI grün.,Tests,"tests/, phpunit.xml",10,Offen,,"tests, quality, ci, priority:, mittel"
Konfigurations-Management (.env) vereinheitlichen,Alle Secrets und Konfig separat via .env; Defaults in .env.example; sichere Zugriffe.,Konfig-Scans → harte Werte entfernen → Doku aktualisieren.,Keine Hardcodings in Codebase; Doku vollständig.,Konfiguration,".env, config/",2,Offen,,"config, security, cleanup, Konfiguration, priority:, mittel"
Caching-Layer für teure Berechnungen/Requests,File-/APCu-Cache für häufige Abfragen und PDF-Vorbereitung; Cache-Invalidierung definieren.,Kandidaten identifizieren → Cache integrieren → Messung vor/nach.,Hit-Rate ≥70% bei Ziel-Keys; Latenzsignifikant reduziert.,Performance,"app/services/, config/cache.php",6,Offen,,"cache, performance, priority:, mittel"
Nutzung externer Bibliotheken minimieren,Vendor-Audit: ungenutzte Pakete entfernen; Alternativen prüfen; Security advisories checken.,composer why / unused → Entfernen → Tests laufen lassen.,Vendor-Größe -20%; keine ungenutzten Pakete laut Audit.,Abhängigkeiten,"composer.json, composer.lock",4,Offen,,"dependencies, security, cleanup, Abhngigkeiten, priority:, mittel"
HTTP-Kompression & Cache-Header korrekt setzen,"Apache: mod_deflate/brotli, Cache-Control/ETag; statische Assets langfristig cachen.",Module prüfen → Header setzen → Lighthouse messen.,Lighthouse Performance +10 Punkte; korrekte Cache-Hits.,Webserver,"/etc/apache2/sites-available/*.conf, .htaccess",3,Offen,,"apache, frontend, performance, Webserver, priority:, mittel"
Asset-Build: CSS/JS minimieren & bündeln,Build-Pipeline (esbuild/webpack) vereinfachen; Tree-Shaking; nur benötigte Assets laden.,Analyse → Bundle-Split → Minification aktivieren.,JS/CSS-Transfer -30%; First Load schneller.,Frontend,"assets/, webpack.config.js",5,Offen,,"assets, frontend, performance, priority:, niedrig"
Logging schlank & gezielt machen,Log-Level prüfen; überflüssige Debug-Logs entfernen; Rotationen/Retention definieren.,Log-Audit → Level korrigieren → Rotation (logrotate) setzen.,Loggröße -50% bei gleicher Aussagekraft; keine PII in Logs.,Observability,"config/logging.php, logs/",2,Offen,,"logging, observability, priority:, niedrig"
Fehler- und Ausnahmebehandlung vereinheitlichen,Globale Handler; klare Fehlercodes; saubere User-Meldungen; keine stummen Catches.,Audit → Handler schreiben → Tests.,Keine unprotokollierten Exceptions; konsistente API-Fehler.,Backend,"app/Exceptions/, public/index.php",3,Offen,,"errors, quality, Backend, priority:, mittel"
Sicherheits-Header & Best Practices,"CSP, X-Content-Type-Options, X-Frame-Options, Referrer-Policy; sichere Cookies.",Header setzen → Scan mit Observatory → Fixes einspielen.,Mozilla Observatory ≥ B+; keine regressiven Breakages.,Security,"Apache vhost, Middleware",3,Offen,,"security, headers, priority:, mittel"
API-Ebene entschlacken (nur benötigte Endpunkte),Nicht benötigte Controller/Routes entfernen; DTOs/Requests härten; Versionierung prüfen.,Usage-Analyse → Unused entfernen → Integrationstests.,Keine toten Routen; 100% Tests grün.,API,"routes/, app/Http/Controllers/",6,Offen,,"api, cleanup, priority:, mittel"
Adminbereich: manage_users & absences_admin refactoren,Klare Verantwortlichkeiten; Duplicates entfernen; Performance bei Filtern/Listen verbessern.,Profiling → DataTables/Pagination sauber → Caching für häufige Filter.,Ladezeiten -40%; Code-Duplizierung reduziert.,Admin/Dashboard,"app/Admin/manage_users.php, app/Admin/absences_admin.php",7,Offen,,"admin, performance, refactor, Admin-Dashboard, priority:, mittel"
Monatsbericht: Speicherung monthly_overtime härten,Transaktionen; Idempotenz; klare Fehlermeldungen; UI-Feedback nach Save.,DB-Transaktionen → Duplicate-Guards → Tests.,Keine Duplikate; korrekte Summen; keine UI-Hänger.,Reporting,"monthly_report.php, TimeManager.php",4,Offen,,"db, reporting, stabilitt, priority:, mittel"
HTTP-Server-Modus prüfen (Apache mpm_event + PHP-FPM),Von mod_php auf PHP-FPM wechseln; bessere Concurrency; saubere Ressourcentrennung.,FPM einrichten → Benchmarks → Entscheidung dokumentieren.,Durchsatz/Latenz neutral oder besser; vereinfachte Deployments.,Webserver/Runtime,"Dockerfile, apache2 config",6,Offen,,"apache, php-fpm, performance, Webserver-Runtime, priority:, niedrig"
Dokumentation & Readme aktualisieren (Aufräumarbeiten),"Setup, Build, Deploy, bekannte Stolpersteine (YAML, DOMPDF, SQLite-Indizes) dokumentieren.",Doku-Entwurf → Review → Veröffentlichen.,Onboarding ≤15 Min; keine offenen Fragen zu Setup.,Doku,"README.md, docs/",2,Offen,,"docs, cleanup, Doku, priority:, niedrig"
